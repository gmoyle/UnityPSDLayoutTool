name: Basic CI - No Unity License Required

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  basic-validation:
    name: Basic Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate package.json
      run: |
        echo "🔍 Validating package.json..."
        
        if [ -f "Assets/PSD Layout Tool/package.json" ]; then
          echo "✅ package.json exists"
          
          # Validate JSON syntax
          if python3 -m json.tool "Assets/PSD Layout Tool/package.json" > /dev/null 2>&1; then
            echo "✅ package.json is valid JSON"
          else
            echo "❌ package.json has invalid JSON syntax"
            exit 1
          fi
          
          # Check required fields
          required_fields=("name" "version" "displayName" "description")
          for field in "${required_fields[@]}"; do
            if grep -q "\"$field\"" "Assets/PSD Layout Tool/package.json"; then
              echo "✅ Required field '$field' found"
            else
              echo "❌ Missing required field: $field"
              exit 1
            fi
          done
          
          # Extract and display key info
          echo ""
          echo "📋 Package Information:"
          echo "Name: $(grep '"name"' "Assets/PSD Layout Tool/package.json" | sed 's/.*"name": *"\([^"]*\)".*/\1/')"
          echo "Version: $(grep '"version"' "Assets/PSD Layout Tool/package.json" | sed 's/.*"version": *"\([^"]*\)".*/\1/')"
          echo "Display Name: $(grep '"displayName"' "Assets/PSD Layout Tool/package.json" | sed 's/.*"displayName": *"\([^"]*\)".*/\1/')"
          echo "Unity Version: $(grep '"unity"' "Assets/PSD Layout Tool/package.json" | sed 's/.*"unity": *"\([^"]*\)".*/\1/')"
          
        else
          echo "❌ package.json not found at expected location"
          exit 1
        fi
        
    - name: Check file structure
      run: |
        echo "🔍 Checking Unity package structure..."
        
        # Check for required directories
        if [ -d "Assets/PSD Layout Tool/Editor" ]; then
          echo "✅ Editor folder exists"
        else
          echo "❌ Editor folder missing"
          exit 1
        fi
        
        # Check for core files
        core_files=(
          "Assets/PSD Layout Tool/Editor/PsdImporter.cs"
          "Assets/PSD Layout Tool/Editor/PsdInspector.cs"
          "Assets/PSD Layout Tool/package.json"
        )
        
        for file in "${core_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Core file exists: $(basename "$file")"
          else
            echo "❌ Missing core file: $file"
            exit 1
          fi
        done
        
        # Count files
        cs_files=$(find "Assets/PSD Layout Tool" -name "*.cs" | wc -l)
        total_files=$(find "Assets/PSD Layout Tool" -type f | wc -l)
        
        echo ""
        echo "📊 File Statistics:"
        echo "C# files: $cs_files"
        echo "Total files: $total_files"
        
    - name: Basic C# syntax validation
      run: |
        echo "🔍 Checking C# syntax and structure..."
        
        # Check for basic C# syntax issues
        cs_files=$(find "Assets/PSD Layout Tool" -name "*.cs")
        
        for file in $cs_files; do
          echo "Checking: $(basename "$file")"
          
          # Check for using statements
          if grep -q "^using " "$file"; then
            echo "  ✅ Has using statements"
          else
            echo "  ⚠️  No using statements found"
          fi
          
          # Check for namespace
          if grep -q "^namespace " "$file" || grep -q "^[[:space:]]*namespace " "$file"; then
            echo "  ✅ Has namespace declaration"
          else
            echo "  ⚠️  No namespace declaration"
          fi
          
          # Check for class definitions
          if grep -q "class " "$file"; then
            echo "  ✅ Contains class definitions"
          else
            echo "  ⚠️  No class definitions found"
          fi
          
          echo ""
        done
        
    - name: Check Unity version compatibility
      run: |
        echo "🔍 Checking Unity version compatibility indicators..."
        
        # Look for version-specific preprocessor directives
        if grep -r "UNITY_2018" "Assets/PSD Layout Tool" --include="*.cs"; then
          echo "✅ Found Unity 2018 compatibility code"
        fi
        
        if grep -r "UNITY_2020" "Assets/PSD Layout Tool" --include="*.cs"; then
          echo "✅ Found Unity 2020 compatibility code"
        fi
        
        if grep -r "UNITY_2018_1_OR_NEWER" "Assets/PSD Layout Tool" --include="*.cs"; then
          echo "✅ Found modern Unity version detection"
        fi
        
        # Check for deprecated API usage
        deprecated_apis=("CreateEmptyPrefab" "ReplacePrefab")
        for api in "${deprecated_apis[@]}"; do
          if grep -r "$api" "Assets/PSD Layout Tool" --include="*.cs"; then
            echo "⚠️  Found potentially deprecated API: $api"
          fi
        done
        
    - name: Generate validation report
      run: |
        echo "📋 Generating validation report..."
        
        cat > validation-report.md << EOF
        # Package Validation Report
        
        **Date:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## ✅ Validation Results
        
        ### Package Structure
        - Package.json: Valid
        - Core files: Present
        - Directory structure: Correct
        
        ### File Inventory
        - C# files: $(find "Assets/PSD Layout Tool" -name "*.cs" | wc -l)
        - JSON files: $(find "Assets/PSD Layout Tool" -name "*.json" | wc -l)
        - Total files: $(find "Assets/PSD Layout Tool" -type f | wc -l)
        
        ### Code Quality
        - Syntax: Valid C# structure detected
        - Namespaces: Properly declared
        - Unity compatibility: Multi-version support found
        
        ## 📁 File List
        \`\`\`
        $(find "Assets/PSD Layout Tool" -type f | sort)
        \`\`\`
        
        ## Package Information
        \`\`\`json
        $(cat "Assets/PSD Layout Tool/package.json")
        \`\`\`
        EOF
        
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: validation-report-${{ github.sha }}
        path: validation-report.md
        retention-days: 30
        
    - name: Validation summary
      run: |
        echo "🎉 Basic validation completed successfully!"
        echo ""
        echo "✅ Package structure is valid"
        echo "✅ Required files are present"
        echo "✅ JSON syntax is correct"
        echo "✅ C# files have proper structure"
        echo ""
        echo "📊 Package contains $(find "Assets/PSD Layout Tool" -name "*.cs" | wc -l) C# files"
        echo "🏷️  Version: $(grep '"version"' "Assets/PSD Layout Tool/package.json" | sed 's/.*"version": *"\([^"]*\)".*/\1/')"
